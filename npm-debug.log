0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.4.3
3 info using node@v0.10.26
4 verbose publish [ '.' ]
5 verbose cache add [ '.', null ]
6 verbose cache add name=undefined spec="." args=[".",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: '.',
7 verbose parsed url   path: '.',
7 verbose parsed url   href: '.' }
8 silly lockFile 3a52ce78- .
9 verbose lock . /Users/craig/.npm/3a52ce78-.lock
10 verbose tar pack [ '/var/folders/n1/r96x64mx6jzcbzkbz1ddrw6r0000gn/T/npm-32232-_XldsFX2/1402441322035-0.25804588571190834/tmp.tgz',
10 verbose tar pack   '.' ]
11 verbose tarball /var/folders/n1/r96x64mx6jzcbzkbz1ddrw6r0000gn/T/npm-32232-_XldsFX2/1402441322035-0.25804588571190834/tmp.tgz
12 verbose folder .
13 info prepublish mojo-views@0.0.7
14 silly lockFile 1f1177db-tar tar://.
15 verbose lock tar://. /Users/craig/.npm/1f1177db-tar.lock
16 silly lockFile 7726f1fe-2035-0-25804588571190834-tmp-tgz tar:///var/folders/n1/r96x64mx6jzcbzkbz1ddrw6r0000gn/T/npm-32232-_XldsFX2/1402441322035-0.25804588571190834/tmp.tgz
17 verbose lock tar:///var/folders/n1/r96x64mx6jzcbzkbz1ddrw6r0000gn/T/npm-32232-_XldsFX2/1402441322035-0.25804588571190834/tmp.tgz /Users/craig/.npm/7726f1fe-2035-0-25804588571190834-tmp-tgz.lock
18 silly lockFile 1f1177db-tar tar://.
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 7726f1fe-2035-0-25804588571190834-tmp-tgz tar:///var/folders/n1/r96x64mx6jzcbzkbz1ddrw6r0000gn/T/npm-32232-_XldsFX2/1402441322035-0.25804588571190834/tmp.tgz
21 silly lockFile 7726f1fe-2035-0-25804588571190834-tmp-tgz tar:///var/folders/n1/r96x64mx6jzcbzkbz1ddrw6r0000gn/T/npm-32232-_XldsFX2/1402441322035-0.25804588571190834/tmp.tgz
22 verbose tar unpack /var/folders/n1/r96x64mx6jzcbzkbz1ddrw6r0000gn/T/npm-32232-_XldsFX2/1402441322035-0.25804588571190834/tmp.tgz
23 silly lockFile 4cd7f0d5-2035-0-25804588571190834-package tar:///var/folders/n1/r96x64mx6jzcbzkbz1ddrw6r0000gn/T/npm-32232-_XldsFX2/1402441322035-0.25804588571190834/package
24 verbose lock tar:///var/folders/n1/r96x64mx6jzcbzkbz1ddrw6r0000gn/T/npm-32232-_XldsFX2/1402441322035-0.25804588571190834/package /Users/craig/.npm/4cd7f0d5-2035-0-25804588571190834-package.lock
25 silly lockFile 7726f1fe-2035-0-25804588571190834-tmp-tgz tar:///var/folders/n1/r96x64mx6jzcbzkbz1ddrw6r0000gn/T/npm-32232-_XldsFX2/1402441322035-0.25804588571190834/tmp.tgz
26 verbose lock tar:///var/folders/n1/r96x64mx6jzcbzkbz1ddrw6r0000gn/T/npm-32232-_XldsFX2/1402441322035-0.25804588571190834/tmp.tgz /Users/craig/.npm/7726f1fe-2035-0-25804588571190834-tmp-tgz.lock
27 silly gunzTarPerm modes [ '755', '644' ]
28 silly gunzTarPerm extractEntry package.json
29 silly gunzTarPerm extractEntry .npmignore
30 silly gunzTarPerm extractEntry README.md
31 silly gunzTarPerm extractEntry .travis.yml
32 silly gunzTarPerm extractEntry lib/index.js
33 silly gunzTarPerm extractEntry lib/plugins/defaultComponents.js
34 silly gunzTarPerm extractEntry lib/plugins/decor/events.js
35 silly gunzTarPerm extractEntry lib/plugins/decor/index.js
36 silly gunzTarPerm extractEntry lib/plugins/decor/sections.js
37 silly gunzTarPerm extractEntry lib/views/index.js
38 silly gunzTarPerm extractEntry lib/views/base/index.js
39 silly gunzTarPerm extractEntry lib/views/list/index.js
40 silly gunzTarPerm extractEntry lib/views/states/index.js
41 silly gunzTarPerm extractEntry lib/views/states/state.js
42 silly gunzTarPerm extractEntry makefile
43 silly gunzTarPerm extractEntry test/clean-test.js
44 silly gunzTarPerm extractEntry test/components/list-test.js
45 silly gunzTarPerm extractEntry test/components/states-test.js
46 silly gunzTarPerm extractEntry test/core/README.md
47 silly gunzTarPerm extractEntry test/core/basic-view-test.js
48 silly gunzTarPerm extractEntry test/core/inherit-test.js
49 silly gunzTarPerm extractEntry test/core/parent-child-test.js
50 silly gunzTarPerm extractEntry test/core/recycle-test.js
51 silly gunzTarPerm extractEntry test/decorators/events-test.js
52 silly gunzTarPerm extractEntry test/decorators/sections-test.js
53 silly gunzTarPerm extractEntry test/helpers/init-test.js
54 silly gunzTarPerm extractEntry test/helpers/jquery.js
55 silly gunzTarPerm extractEntry test/helpers/doc.html
56 silly gunzTarPerm extractEntry test/paperclip/README.md
57 silly gunzTarPerm extractEntry test/paperclip/basic-test.js
58 silly gunzTarPerm extractEntry test/paperclip/conditional-sections-test.js
59 silly lockFile 4cd7f0d5-2035-0-25804588571190834-package tar:///var/folders/n1/r96x64mx6jzcbzkbz1ddrw6r0000gn/T/npm-32232-_XldsFX2/1402441322035-0.25804588571190834/package
60 silly lockFile 4cd7f0d5-2035-0-25804588571190834-package tar:///var/folders/n1/r96x64mx6jzcbzkbz1ddrw6r0000gn/T/npm-32232-_XldsFX2/1402441322035-0.25804588571190834/package
61 silly lockFile 7726f1fe-2035-0-25804588571190834-tmp-tgz tar:///var/folders/n1/r96x64mx6jzcbzkbz1ddrw6r0000gn/T/npm-32232-_XldsFX2/1402441322035-0.25804588571190834/tmp.tgz
62 silly lockFile 7726f1fe-2035-0-25804588571190834-tmp-tgz tar:///var/folders/n1/r96x64mx6jzcbzkbz1ddrw6r0000gn/T/npm-32232-_XldsFX2/1402441322035-0.25804588571190834/tmp.tgz
63 verbose tar pack [ '/Users/craig/.npm/mojo-views/0.0.7/package.tgz',
63 verbose tar pack   '/var/folders/n1/r96x64mx6jzcbzkbz1ddrw6r0000gn/T/npm-32232-_XldsFX2/1402441322035-0.25804588571190834/package' ]
64 verbose tarball /Users/craig/.npm/mojo-views/0.0.7/package.tgz
65 verbose folder /var/folders/n1/r96x64mx6jzcbzkbz1ddrw6r0000gn/T/npm-32232-_XldsFX2/1402441322035-0.25804588571190834/package
66 silly lockFile 4cd7f0d5-2035-0-25804588571190834-package tar:///var/folders/n1/r96x64mx6jzcbzkbz1ddrw6r0000gn/T/npm-32232-_XldsFX2/1402441322035-0.25804588571190834/package
67 verbose lock tar:///var/folders/n1/r96x64mx6jzcbzkbz1ddrw6r0000gn/T/npm-32232-_XldsFX2/1402441322035-0.25804588571190834/package /Users/craig/.npm/4cd7f0d5-2035-0-25804588571190834-package.lock
68 silly lockFile 36c59025-npm-mojo-views-0-0-7-package-tgz tar:///Users/craig/.npm/mojo-views/0.0.7/package.tgz
69 verbose lock tar:///Users/craig/.npm/mojo-views/0.0.7/package.tgz /Users/craig/.npm/36c59025-npm-mojo-views-0-0-7-package-tgz.lock
70 silly lockFile 4cd7f0d5-2035-0-25804588571190834-package tar:///var/folders/n1/r96x64mx6jzcbzkbz1ddrw6r0000gn/T/npm-32232-_XldsFX2/1402441322035-0.25804588571190834/package
71 silly lockFile 4cd7f0d5-2035-0-25804588571190834-package tar:///var/folders/n1/r96x64mx6jzcbzkbz1ddrw6r0000gn/T/npm-32232-_XldsFX2/1402441322035-0.25804588571190834/package
72 silly lockFile 36c59025-npm-mojo-views-0-0-7-package-tgz tar:///Users/craig/.npm/mojo-views/0.0.7/package.tgz
73 silly lockFile 36c59025-npm-mojo-views-0-0-7-package-tgz tar:///Users/craig/.npm/mojo-views/0.0.7/package.tgz
74 silly lockFile 76dde40a-aig-npm-mojo-views-0-0-7-package /Users/craig/.npm/mojo-views/0.0.7/package
75 verbose lock /Users/craig/.npm/mojo-views/0.0.7/package /Users/craig/.npm/76dde40a-aig-npm-mojo-views-0-0-7-package.lock
76 silly lockFile 76dde40a-aig-npm-mojo-views-0-0-7-package /Users/craig/.npm/mojo-views/0.0.7/package
77 silly lockFile 76dde40a-aig-npm-mojo-views-0-0-7-package /Users/craig/.npm/mojo-views/0.0.7/package
78 verbose tar unpack /Users/craig/.npm/mojo-views/0.0.7/package.tgz
79 silly lockFile 1ee8bd67-aig-npm-mojo-views-0-0-7-package tar:///Users/craig/.npm/mojo-views/0.0.7/package
80 verbose lock tar:///Users/craig/.npm/mojo-views/0.0.7/package /Users/craig/.npm/1ee8bd67-aig-npm-mojo-views-0-0-7-package.lock
81 silly lockFile 36c59025-npm-mojo-views-0-0-7-package-tgz tar:///Users/craig/.npm/mojo-views/0.0.7/package.tgz
82 verbose lock tar:///Users/craig/.npm/mojo-views/0.0.7/package.tgz /Users/craig/.npm/36c59025-npm-mojo-views-0-0-7-package-tgz.lock
83 silly gunzTarPerm modes [ '755', '644' ]
84 silly gunzTarPerm extractEntry package.json
85 silly gunzTarPerm extractEntry .npmignore
86 silly gunzTarPerm extractEntry README.md
87 silly gunzTarPerm extractEntry .travis.yml
88 silly gunzTarPerm extractEntry lib/index.js
89 silly gunzTarPerm extractEntry lib/plugins/defaultComponents.js
90 silly gunzTarPerm extractEntry lib/plugins/decor/events.js
91 silly gunzTarPerm extractEntry lib/plugins/decor/index.js
92 silly gunzTarPerm extractEntry lib/plugins/decor/sections.js
93 silly gunzTarPerm extractEntry lib/views/index.js
94 silly gunzTarPerm extractEntry lib/views/base/index.js
95 silly gunzTarPerm extractEntry lib/views/list/index.js
96 silly gunzTarPerm extractEntry lib/views/states/index.js
97 silly gunzTarPerm extractEntry lib/views/states/state.js
98 silly gunzTarPerm extractEntry makefile
99 silly gunzTarPerm extractEntry test/clean-test.js
100 silly gunzTarPerm extractEntry test/components/list-test.js
101 silly gunzTarPerm extractEntry test/components/states-test.js
102 silly gunzTarPerm extractEntry test/core/README.md
103 silly gunzTarPerm extractEntry test/core/basic-view-test.js
104 silly gunzTarPerm extractEntry test/core/inherit-test.js
105 silly gunzTarPerm extractEntry test/core/parent-child-test.js
106 silly gunzTarPerm extractEntry test/core/recycle-test.js
107 silly gunzTarPerm extractEntry test/decorators/events-test.js
108 silly gunzTarPerm extractEntry test/decorators/sections-test.js
109 silly gunzTarPerm extractEntry test/helpers/init-test.js
110 silly gunzTarPerm extractEntry test/helpers/jquery.js
111 silly gunzTarPerm extractEntry test/helpers/doc.html
112 silly gunzTarPerm extractEntry test/paperclip/README.md
113 silly gunzTarPerm extractEntry test/paperclip/basic-test.js
114 silly gunzTarPerm extractEntry test/paperclip/conditional-sections-test.js
115 silly lockFile 1ee8bd67-aig-npm-mojo-views-0-0-7-package tar:///Users/craig/.npm/mojo-views/0.0.7/package
116 silly lockFile 1ee8bd67-aig-npm-mojo-views-0-0-7-package tar:///Users/craig/.npm/mojo-views/0.0.7/package
117 silly lockFile 36c59025-npm-mojo-views-0-0-7-package-tgz tar:///Users/craig/.npm/mojo-views/0.0.7/package.tgz
118 silly lockFile 36c59025-npm-mojo-views-0-0-7-package-tgz tar:///Users/craig/.npm/mojo-views/0.0.7/package.tgz
119 verbose chmod /Users/craig/.npm/mojo-views/0.0.7/package.tgz 644
120 verbose chown /Users/craig/.npm/mojo-views/0.0.7/package.tgz [ 501, 20 ]
121 silly lockFile 3a52ce78- .
122 silly lockFile 3a52ce78- .
123 silly publish { name: 'mojo-views',
123 silly publish   version: '0.0.7',
123 silly publish   description: 'modular mv+ JavaScript framework for node, and the web',
123 silly publish   main: './lib/index.js',
123 silly publish   jam:
123 silly publish    { baseUrl: 'public',
123 silly publish      packageDir: 'public/vendor',
123 silly publish      dependencies:
123 silly publish       { jquery: '1.7.x',
123 silly publish         'jquery-transit': '*',
123 silly publish         underscore: '*',
123 silly publish         events: '0.0.x',
123 silly publish         async: '0.2.x' },
123 silly publish      config:
123 silly publish       { repository: 'http://npm.classdojo.com:5984/jam',
123 silly publish         paths: [Object] } },
123 silly publish   scripts: { test: 'make test-node' },
123 silly publish   keywords: [ 'mojo-plugin' ],
123 silly publish   repository: { url: 'git://github.com/classdojo/mojo.js.git' },
123 silly publish   dependencies:
123 silly publish    { 'type-component': '0.0.x',
123 silly publish      bindable: '0.5.x',
123 silly publish      janitorjs: '0.0.4',
123 silly publish      factories: '0.0.x',
123 silly publish      loaf: '0.2.x',
123 silly publish      nofactor: '0.0.x',
123 silly publish      'bindable-decor-bindings': '0.1.x',
123 silly publish      underscore: '1.4.x',
123 silly publish      'mojo-paperclip': '0.3.x',
123 silly publish      protoclass: '0.0.5',
123 silly publish      subindable: '0.1.x',
123 silly publish      runlater: '0.0.x',
123 silly publish      poolparty: '0.0.x',
123 silly publish      flatstack: '0.0.10',
123 silly publish      boojs: '0.0.x',
123 silly publish      async: '0.x.x',
123 silly publish      'mojo-animator': '0.0.x',
123 silly publish      'mojo-application': '0.0.x',
123 silly publish      frills: '0.0.2',
123 silly publish      'mojo-registered-classes': '0.0.x',
123 silly publish      noselector: '0.0.x' },
123 silly publish   devDependencies:
123 silly publish    { 'expect.js': '~0.2.0',
123 silly publish      paperclip: '0.3.x',
123 silly publish      jsdom: '~0.8.9',
123 silly publish      mocha: '~1.15.1',
123 silly publish      istanbul: '~0.1.46',
123 silly publish      coveralls: '~2.5.0',
123 silly publish      benchmark: '~1.0.0',
123 silly publish      browserify: '~3.24.2',
123 silly publish      yuidocjs: '~0.3.48',
123 silly publish      'mojo-paperclip': '0.4.x' },
123 silly publish   readme: '### Mojo Views [![Build Status](https://travis-ci.org/classdojo/mojo-views.svg)](https://travis-ci.org/classdojo/mojo-views)\n\n\nMojo.js is a JavaScript framework for building Single Page Applications, or static websites in [Node.js](http://nodejs.org/). It\'s inspired by [Angular.js](http://angularjs.org/), [Derby.js](http://derbyjs.com/), [Knockout.js](http://knockoutjs.com/), [Meteor.js](http://www.meteor.com/), [Ember.js](http://emberjs.com/), [jQuery](http://jquery.com/), [Backbone.js](http://backbonejs.org/), and many other JavaScript, and non-JavaScript frameworks. The core is small, while third-party modules allow you to customize Mojo depending on your requirements.\nMojo was built initially to phase out old code, and itself - hence the modularity. The philosophy behind Mojo is to allow you to build on top of your old code base, and slowly strangle out your old application until you have a new, highly maintainable application.\n\n### Features\n\n- Supported in all major browsers: `IE 8+`, `Firefox`, `Chrome`, `Safari`, and `Opera`.\n- Supported in Node.js. Run the same code on the front-end & backend. See the [mojo site source code](https://github.com/classdojo/mojojs.com) for an example.\n- Flexible bi-directional data-bindings.\n- Plays nicely with other frameworks such as Backbone.js, Spine.js, and jQuery. Easily build new application code on top of old code.\n- No magic. No assumptions. Mojo.js was built around explicitness and modularity.\n- 100% JavaScript - [paperclip.js](https://github.com/classdojo/paperclip.js) templates are also translated to JavaScript.\n- Small core. Modules make up the rest.\n  - Decorators are core - they control everything from computed properties, creating children of a view, and even setting up templates. There are a few built-in decorators (for now - we\'ll take them out later): `drag & drop`, `paperclip.js` (template), `bindings` (computed properties), `transition`, and `events` (Backbone style). You can also [create your own](#custom-decorators) if you want to extend the core, but there isn\'t a single decorator that\'s required for Mojo.js to function properly.\n  - The framework itself is broken into multiple repositories - this makes it easier to encapsulate, re-use bits of functionality.\n\n### Core Libraries\n\n- [bindable.js](https://github.com/classdojo/bindable.js) - data-binding layer.\n- [paperclip.js](https://github.com/classdojo/paperclip.js) - template engine.\n- [loaf.js](https://github.com/classdojo/loaf.js) - controls sections, or virtual document fragments.\n- [flatstack](https://github.com/classdojo/flatstack.js) - queue for rendering / removing views.\n\n\n### Examples:\n\n- [Hello World](http://jsfiddle.net/BZA8K/88/)\n- [Hello Input](http://jsfiddle.net/BZA8K/91/)\n- [Todo List](http://jsfiddle.net/BZA8K/92/)\n- [Dynamic Templates](http://jsfiddle.net/BZA8K/93/)\n- [States Component](http://jsfiddle.net/BZA8K/94/)\n- [Custom Components](http://jsfiddle.net/BZA8K/95/)\n- [dots benchmark](http://jsfiddle.net/BZA8K/96/)\n- [property scope](http://jsfiddle.net/BZA8K/106/)\n\n### TODO:\n\n- route docs\n- API docs\n- starter kit\n- testing docs\n- style guidlines\n\n### Installation\n\nYou can get started with Mojo.js by installing the [starter kit](http://github.com/classdojo/mojo-starter). In terminal run:\n\n```bash\ngit clone git@github.com:classdojo/mojo-starter.git && cd mojo-starter && npm install;\n```\n\n## View Usage\n\nViews extend [bindable](http://github.com/classdojo/bindable.js) objects. The best way to create a view is to first create a sub-class, then instantiate it. For example:\n\n```javascript\nvar SubView = mojo.View.extend({\n  name: "craig"\n});\nvar view = new SubView();\nconsole.log(view.get("name")); //craig\n```\n\n#### DocumentFragment view.render()\n\nRenders the view. [For example](http://jsfiddle.net/BZA8K/97/):\n\n```javascript\nvar view = new mojo.View({\n  paper: paperclip.compile("hello!")\n});\n$("#application").append(view.render());\n```\n\n#### view.section\n\nThe [loaf section](https://github.com/classdojo/loaf.js). This is where everything is rendered to.\n\n#### view.remove(callback)\n\nRemoves the view from the DOM.\n\n#### view.emit(event [, data...])\n\nemits an event\n\n#### view.on(event, listener)\n\nlistener for an event. For example:\n\n```javascript\nvar view = new mojo.View();\nview.on("hello", function() {\n\n});\nview.emit("hello"); //trigger listener\n```\n\n#### view.bubble(event [, data...])\n\nbubbles an event up to the root view.\n\n#### view.parent\n\nreference to the parent view\n\n#### events\n\n- `render` - emitted when `view.render()` is called.\n- `remove` - emitted when `view.remove()` is called.\n- `dispose` - emitted when the view is removed, and not used anymore.\n\n\n#### protected methods\n\nMojo.js has a few methods you can override if you need to something durring render / remove.\n\n```javascript\nvar view = new mojo.View({\n  willRender: function() {\n    // called before render\n  },\n  didRender: function() {\n    //called after render\n  },\n  willRemove: function() {\n    //called before remove\n  },\n  didRemove: function() {\n    //called on removed\n  }\n});\n```\n\n\n## View Decorators\n\nDecorators are extensions to the Mojo.js framework - they help you describe how your view should function, but aren\'t necessary for Mojo.js to work. Therefore, you can easily mix decorators, or even [create your own](#custom-decorators). This design was picked to allow you, the coder to pick whatever style suites you best. There are however a few built-in decorators that might help you get started.\n\n\n### Templates\n\nBy default, Mojo.js uses [paperclip.js](https://github.com/classdojo/paperclip.js) for the template engine. [Here\'s a basic example](http://jsfiddle.net/BZA8K/70/):\n\n```javascript\nvar view = new mojo.View({\n  paper: paperclip.compile("hello world!")\n});\n$("#application").append(view.render());\n```\n\nYou can also dynamically change the template. Say for instance you want to change the template depending on a model type, [here\'s what you can do](http://jsfiddle.net/BZA8K/77/):\n\n```javascript\n\nvar templates = {\n    notice  : paperclip.compile("notice"),\n    default : paperclip.compile("notice"),\n    warning : paperclip.compile("warning"),\n    error   : paperclip.compile("error")\n};\n\nvar NotificationView = mojo.View.extend({\n    "bindings": {\n        "model.type": {\n            "paper": {\n                "map": function(type) {\n                    return templates[type] || templates.default;\n                 }\n             }\n         }\n     }\n});\n\nvar alertView = new NotificationView({ model: new bindable.Object({ type: "alert" }) });\nvar photoView = new NotificationView({ model: new bindable.Object({ type: "photo" }) });\n```\n\nYou can add your own template - just create a [custom decorator](#custom-decorators).\n\n### Bindings\n\nThe bindings decorator is similar to Ember\'s computed properties feature. [For example](http://jsfiddle.net/BZA8K/98/):\n\n```javascript\nvar TestView = mojo.View.extend({\n  paper: paperclip.compile("hello-world"),\n  bindings: {\n\n      //join first & last name\n      "firstName, lastName": {\n          "fullName": {\n              "map": function(firstName, lastName) {\n                  return [firstName, lastName].join(" ");\n              }\n          }\n      },\n\n      //uppercase & lowercase fullName\n      "fullName": {\n          "fullNameUpper": {\n              "map": function(fullName) {\n                  return String(fullName).toUpperCase();\n              }\n          },\n          "fullNameLower": {\n              "map": function(fullName) {\n                  return String(fullName).toLowerCase();\n              }\n          }\n      },\n\n      //wait for fullNameUpper to change\n      "fullNameUpper": function(fullNameUpper) {\n          console.log("CHANGE!");\n      }\n  }\n});\n\n//init view somewhere\n```\n\n### Sections\n\n\nSections are what make up your application - they allow you to break down your app into smaller, more modular pieces. [Here\'s a basic example](http://jsfiddle.net/BZA8K/99/):\n\n```javascript\n//views/main/header/logo.js\nvar LogoView = mojo.View.extend({\n    paper: paperclip.compile("header-logo")\n});\n\n//views/main/header/index.js\nvar HeaderView = mojo.View.extend({\n    paper: paperclip.compile("header"),\n    sections: {\n        logo: LogoView\n    }\n});\n\n//views/main/content/index.js\nvar ContentView = mojo.View.extend({\n    paper: paperclip.compile("content")\n});\n\n//views/main/index.js\nvar MainView = mojo.View.extend({\n    paper: paperclip.compile("main"),\n    sections: {\n        header: HeaderView,\n        content: ContentView\n    }\n});\n\nvar mainView = new MainView();\n$("#application")..append(mainView.render());\n```\n\nMojo comes with a few built-in components: [lists](#list-component), and [states](#states-component).\n\n### List Component\n\nList of views. [Here\'s an example](http://jsfiddle.net/BZA8K/100/):\n\n```javascript\nvar TodosView = mojo.View.extend({\n  todos: todoCollection,\n  sections: {\n    items: {\n      type: "list",\n      source: "todos",\n      modelViewClass: TodoView\n    }\n  }\n})\n```\n\nNote that each model item in the source collection is assigned as `model` for each list item.\n\n#### list.filter(fn)\n\nFilters the list. For example:\n\n```javascript\nvar TodosView = mojo.View.extend({\n  todos: todoCollection,\n  sections: {\n    items: {\n      type: "list",\n      source: "todos",\n      modelViewClass: TodoView,\n\n      //filter items that are NOT done.\n      filter: function(model) {\n        return !model.get("done");\n      }\n    }\n  }\n});\n```\n\n#### list.sort(fn)\n\nSorts the list. For example:\n\n```javascript\nvar TodosView = mojo.View.extend({\n  todos: todoCollection,\n  sections: {\n    items: {\n      type: "list",\n      source: "todos",\n      modelViewClass: TodoView,\n      sort: function(a, b) {\n        return a.get("priority") > b.get("priority") ? -1 : 1;\n      }\n    }\n  }\n});\n```\n\n### States Component\n\nThe states component allow you to toggle between multiple views. This is useful if you want to introduce something like routes into your application. [Here\'s an example](http://jsfiddle.net/BZA8K/101/):\n\n```javascript\nvar MainView = mojo.View.extend({\n  sections: {\n    pages: {\n      type: "states",\n      index: 0,\n      views: [\n        { class: ContactView , name: "contact" },\n        { class: HomeView    , name: "home"    }\n      ]\n    }\n  }\n})\n```\n\n### states.index\n\nthe current index of the state. [For example](http://jsfiddle.net/BZA8K/102/):\n\n```javascript\nvar MainView = mojo.View.extend({\n  sections: {\n    pages: {\n      type: "states",\n      index: 0,\n      views: [\n        { class: ContactView , name: "contact" },\n        { class: HomeView    , name: "home"    }\n      ]\n    }\n  }\n});\n\nvar view = new MainView();\nconsole.log(view.get("sections.pages.index")); //0\n```\n\n### Custom Components\n\nMojo.js allows you to register your own components. [Here\'s a basic example](http://jsfiddle.net/BZA8K/103/):\n\n```javascript\n//views/main/header/logo.js\nvar HelloView = mojo.View.extend({\n    paper: paperclip.compile("hello")\n});\n\nmojo.models.set("components.hello", HelloView);\n\nvar MainView = mojo.View.extend({\n    paper: paperclip.compile("main"),\n    sections: {\n        hello1: {\n            type: "hello",\n            message: "craig"\n        },\n        hello2: {\n            type: "hello",\n            message: "john"\n        }\n    }\n});\n\nvar mainView = new MainView();\n$("#application").append(mainView.render());\n```\n\nNote that options provided for each section are automatically set to the component being created. The above equivalent might be:\n\n```javascript\nvar view = new HelloView({\n  message: "john"\n});\n```\n\n### Custom Decorators\n\nThere are some cases you might want to add your own decorator. Say for instance you want to add your own custom template engine. [No problem](http://jsfiddle.net/BZA8K/104/):\n\ndecorator:\n\n```javascript\nvar handlebarsDecorator = {\n\n    //returns the handlebar options. This decorator is ignore if the options are\n    //undefined\n    getOptions: function(view) {\n        return view.handlebars;\n    },\n\n    //decorates the view with the given options\n    decorate: function(view, sourceName) {\n\n        //compile the template\n        var template = Handlebars.compile($("script[data-template-name=\'" + sourceName + "\']").html());\n\n        //wait for the view to render, then add the elements\n        view.on("render", function() {\n\n            //temporary placeholder for the elements - use innerHTML to compile the template.\n            var div       = document.createElement("div");\n            div.innerHTML = template(view.context());\n\n            //append JUST the child nodes to the view section\n            view.section.append.apply(view.section, div.childNodes);\n        });\n    }\n}\n\nmojo.decorator(handlebarsDecorator);\n```\n\nusage:\n\n```javascript\nvar MainView = mojo.View.extend({\n    name       : "craig",\n    handlebars : "main"\n});\n```\n\n## models singleton\n\nAllows for models to be referenced anywhere in the application. [See the variable scope example]().\n\n## Property Scope\n\nChild views inherit properties from the parent view, just like variable scope in JavaScript. Therefore, you should always `define` properties you want to use within your views. [For example](http://jsfiddle.net/BZA8K/105/):\n\n```javascript\nvar user = new mojo.bindable.Object({\n    name: "john"\n});\n\nmojo.models.set("user", user);\n\nvar HeaderView = mojo.View.extend({\n    paper: paperclip.compile("header")\n});\n\nvar MainView = mojo.View.extend({\n    define: ["user"],\n    paper: paperclip.compile("main"),\n    bindings: {\n        "models.user": "user"\n    },\n    sections: {\n        header: HeaderView\n    }\n});\n\n\nvar view = new MainView();\n$("#application").append(view.render());\n```\n\n[Checkout what happens](http://jsfiddle.net/BZA8K/106/) when we define `user` in HeaderView. Notice that `user` isn\'t inherited anymore, and remains `undefined`.\n',
123 silly publish   readmeFilename: 'README.md',
123 silly publish   bugs: { url: 'https://github.com/classdojo/mojo.js/issues' },
123 silly publish   homepage: 'https://github.com/classdojo/mojo.js',
123 silly publish   _id: 'mojo-views@0.0.7',
123 silly publish   dist: { shasum: 'dbfe13908ed73ab0e9eb8b184d64c5df38ba2eae' },
123 silly publish   _from: '.' }
124 verbose url raw mojo-views
125 verbose url resolving [ 'http://registry.npmjs.org/', './mojo-views' ]
126 verbose url resolved http://registry.npmjs.org/mojo-views
127 info trying registry request attempt 1 at 16:02:02
128 http PUT http://registry.npmjs.org/mojo-views
129 http 403 http://registry.npmjs.org/mojo-views
130 error publish Failed PUT 403
131 error Error: forbidden cannot modify pre-existing version: 0.0.7
131 error old={"name":"mojo-views","version":"0.0.7","description":"modular mv+ JavaScript framework for node, and the web","main":"./lib/index.js","jam":{"baseUrl":"public","packageDir":"public/vendor","dependencies":{"jquery":"1.7.x","jquery-transit":"*","underscore":"*","events":"0.0.x","async":"0.2.x"},"config":{"repository":"http://npm.classdojo.com:5984/jam","paths":{"templates":"public/templates"}}},"scripts":{"test":"make test-node"},"keywords":["mojo-plugin"],"repository":{"url":"git://github.com/classdojo/mojo.js.git"},"dependencies":{"type-component":"0.0.x","bindable":"0.5.x","janitorjs":"0.0.4","factories":"0.0.x","loaf":"0.2.x","nofactor":"0.0.x","bindable-decor-bindings":"0.1.x","underscore":"1.4.x","mojo-paperclip":"0.3.x","protoclass":"0.0.5","subindable":"0.1.x","runlater":"0.0.x","poolparty":"0.0.x","flatstack":"0.0.10","boojs":"0.0.x","async":"0.x.x","mojo-animator":"0.0.x","mojo-application":"0.0.x","frills":"0.0.2","mojo-registered-classes":"0.0.x","noselector":"0.0.x"},"devDependencies":{"expect.js":"~0.2.0","paperclip":"0.3.x","jsdom":"~0.8.9","mocha":"~1.15.1","istanbul":"~0.1.46","coveralls":"~2.5.0","benchmark":"~1.0.0","browserify":"~3.24.2","yuidocjs":"~0.3.48","mojo-paperclip":"0.4.x"},"bugs":{"url":"https://github.com/classdojo/mojo.js/issues"},"homepage":"https://github.com/classdojo/mojo.js","_id":"mojo-views@0.0.7","dist":{"shasum":"dbfe13908ed73ab0e9eb8b184d64c5df38ba2eae","tarball":"http://registry.npmjs.org/mojo-views/-/mojo-views-0.0.7.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"architectd","email":"craig.j.condon@gmail.com"},"maintainers":[{"name":"architectd","email":"craig.j.condon@gmail.com"}]}
131 error new={"name":"mojo-views","version":"0.0.7","description":"modular mv+ JavaScript framework for node, and the web","main":"./lib/index.js","jam":{"baseUrl":"public","packageDir":"public/vendor","dependencies":{"jquery":"1.7.x","jquery-transit":"*","underscore":"*","events":"0.0.x","async":"0.2.x"},"config":{"repository":"http://npm.classdojo.com:5984/jam","paths":{"templates":"public/templates"}}},"scripts":{"test":"make test-node"},"keywords":["mojo-plugin"],"repository":{"url":"git://github.com/classdojo/mojo.js.git"},"dependencies":{"type-component":"0.0.x","bindable":"0.5.x","janitorjs":"0.0.4","factories":"0.0.x","loaf":"0.2.x","nofactor":"0.0.x","bindable-decor-bindings":"0.1.x","underscore":"1.4.x","mojo-paperclip":"0.3.x","protoclass":"0.0.5","subindable":"0.1.x","runlater":"0.0.x","poolparty":"0.0.x","flatstack":"0.0.10","boojs":"0.0.x","async":"0.x.x","mojo-animator":"0.0.x","mojo-application":"0.0.x","frills":"0.0.2","mojo-registered-classes":"0.0.x","noselector":"0.0.x"},"devDependencies":{"expect.js":"~0.2.0","paperclip":"0.3.x","jsdom":"~0.8.9","mocha":"~1.15.1","istanbul":"~0.1.46","coveralls":"~2.5.0","benchmark":"~1.0.0","browserify":"~3.24.2","yuidocjs":"~0.3.48","mojo-paperclip":"0.4.x"},"readme":"### Mojo Views [![Build Status](https://travis-ci.org/classdojo/mojo-views.svg)](https://travis-ci.org/classdojo/mojo-views)\u000a\u000a\u000aMojo.js is a JavaScript framework for building Single Page Applications, or static websites in [Node.js](http://nodejs.org/). It's inspired by [Angular.js](http://angularjs.org/), [Derby.js](http://derbyjs.com/), [Knockout.js](http://knockoutjs.com/), [Meteor.js](http://www.meteor.com/), [Ember.js](http://emberjs.com/), [jQuery](http://jquery.com/), [Backbone.js](http://backbonejs.org/), and many other JavaScript, and non-JavaScript frameworks. The core is small, while third-party modules allow you to customize Mojo depending on your requirements.\u000aMojo was built initially to phase out old code, and itself - hence the modularity. The philosophy behind Mojo is to allow you to build on top of your old code base, and slowly strangle out your old application until you have a new, highly maintainable application.\u000a\u000a### Features\u000a\u000a- Supported in all major browsers: `IE 8+`, `Firefox`, `Chrome`, `Safari`, and `Opera`.\u000a- Supported in Node.js. Run the same code on the front-end & backend. See the [mojo site source code](https://github.com/classdojo/mojojs.com) for an example.\u000a- Flexible bi-directional data-bindings.\u000a- Plays nicely with other frameworks such as Backbone.js, Spine.js, and jQuery. Easily build new application code on top of old code.\u000a- No magic. No assumptions. Mojo.js was built around explicitness and modularity.\u000a- 100% JavaScript - [paperclip.js](https://github.com/classdojo/paperclip.js) templates are also translated to JavaScript.\u000a- Small core. Modules make up the rest.\u000a  - Decorators are core - they control everything from computed properties, creating children of a view, and even setting up templates. There are a few built-in decorators (for now - we'll take them out later): `drag & drop`, `paperclip.js` (template), `bindings` (computed properties), `transition`, and `events` (Backbone style). You can also [create your own](#custom-decorators) if you want to extend the core, but there isn't a single decorator that's required for Mojo.js to function properly.\u000a  - The framework itself is broken into multiple repositories - this makes it easier to encapsulate, re-use bits of functionality.\u000a\u000a### Core Libraries\u000a\u000a- [bindable.js](https://github.com/classdojo/bindable.js) - data-binding layer.\u000a- [paperclip.js](https://github.com/classdojo/paperclip.js) - template engine.\u000a- [loaf.js](https://github.com/classdojo/loaf.js) - controls sections, or virtual document fragments.\u000a- [flatstack](https://github.com/classdojo/flatstack.js) - queue for rendering / removing views.\u000a\u000a\u000a### Examples:\u000a\u000a- [Hello World](http://jsfiddle.net/BZA8K/88/)\u000a- [Hello Input](http://jsfiddle.net/BZA8K/91/)\u000a- [Todo List](http://jsfiddle.net/BZA8K/92/)\u000a- [Dynamic Templates](http://jsfiddle.net/BZA8K/93/)\u000a- [States Component](http://jsfiddle.net/BZA8K/94/)\u000a- [Custom Components](http://jsfiddle.net/BZA8K/95/)\u000a- [dots benchmark](http://jsfiddle.net/BZA8K/96/)\u000a- [property scope](http://jsfiddle.net/BZA8K/106/)\u000a\u000a### TODO:\u000a\u000a- route docs\u000a- API docs\u000a- starter kit\u000a- testing docs\u000a- style guidlines\u000a\u000a### Installation\u000a\u000aYou can get started with Mojo.js by installing the [starter kit](http://github.com/classdojo/mojo-starter). In terminal run:\u000a\u000a```bash\u000agit clone git@github.com:classdojo/mojo-starter.git && cd mojo-starter && npm install;\u000a```\u000a\u000a## View Usage\u000a\u000aViews extend [bindable](http://github.com/classdojo/bindable.js) objects. The best way to create a view is to first create a sub-class, then instantiate it. For example:\u000a\u000a```javascript\u000avar SubView = mojo.View.extend({\u000a  name: \"craig\"\u000a});\u000avar view = new SubView();\u000aconsole.log(view.get(\"name\")); //craig\u000a```\u000a\u000a#### DocumentFragment view.render()\u000a\u000aRenders the view. [For example](http://jsfiddle.net/BZA8K/97/):\u000a\u000a```javascript\u000avar view = new mojo.View({\u000a  paper: paperclip.compile(\"hello!\")\u000a});\u000a$(\"#application\").append(view.render());\u000a```\u000a\u000a#### view.section\u000a\u000aThe [loaf section](https://github.com/classdojo/loaf.js). This is where everything is rendered to.\u000a\u000a#### view.remove(callback)\u000a\u000aRemoves the view from the DOM.\u000a\u000a#### view.emit(event [, data...])\u000a\u000aemits an event\u000a\u000a#### view.on(event, listener)\u000a\u000alistener for an event. For example:\u000a\u000a```javascript\u000avar view = new mojo.View();\u000aview.on(\"hello\", function() {\u000a\u000a});\u000aview.emit(\"hello\"); //trigger listener\u000a```\u000a\u000a#### view.bubble(event [, data...])\u000a\u000abubbles an event up to the root view.\u000a\u000a#### view.parent\u000a\u000areference to the parent view\u000a\u000a#### events\u000a\u000a- `render` - emitted when `view.render()` is called.\u000a- `remove` - emitted when `view.remove()` is called.\u000a- `dispose` - emitted when the view is removed, and not used anymore.\u000a\u000a\u000a#### protected methods\u000a\u000aMojo.js has a few methods you can override if you need to something durring render / remove.\u000a\u000a```javascript\u000avar view = new mojo.View({\u000a  willRender: function() {\u000a    // called before render\u000a  },\u000a  didRender: function() {\u000a    //called after render\u000a  },\u000a  willRemove: function() {\u000a    //called before remove\u000a  },\u000a  didRemove: function() {\u000a    //called on removed\u000a  }\u000a});\u000a```\u000a\u000a\u000a## View Decorators\u000a\u000aDecorators are extensions to the Mojo.js framework - they help you describe how your view should function, but aren't necessary for Mojo.js to work. Therefore, you can easily mix decorators, or even [create your own](#custom-decorators). This design was picked to allow you, the coder to pick whatever style suites you best. There are however a few built-in decorators that might help you get started.\u000a\u000a\u000a### Templates\u000a\u000aBy default, Mojo.js uses [paperclip.js](https://github.com/classdojo/paperclip.js) for the template engine. [Here's a basic example](http://jsfiddle.net/BZA8K/70/):\u000a\u000a```javascript\u000avar view = new mojo.View({\u000a  paper: paperclip.compile(\"hello world!\")\u000a});\u000a$(\"#application\").append(view.render());\u000a```\u000a\u000aYou can also dynamically change the template. Say for instance you want to change the template depending on a model type, [here's what you can do](http://jsfiddle.net/BZA8K/77/):\u000a\u000a```javascript\u000a\u000avar templates = {\u000a    notice  : paperclip.compile(\"notice\"),\u000a    default : paperclip.compile(\"notice\"),\u000a    warning : paperclip.compile(\"warning\"),\u000a    error   : paperclip.compile(\"error\")\u000a};\u000a\u000avar NotificationView = mojo.View.extend({\u000a    \"bindings\": {\u000a        \"model.type\": {\u000a            \"paper\": {\u000a                \"map\": function(type) {\u000a                    return templates[type] || templates.default;\u000a                 }\u000a             }\u000a         }\u000a     }\u000a});\u000a\u000avar alertView = new NotificationView({ model: new bindable.Object({ type: \"alert\" }) });\u000avar photoView = new NotificationView({ model: new bindable.Object({ type: \"photo\" }) });\u000a```\u000a\u000aYou can add your own template - just create a [custom decorator](#custom-decorators).\u000a\u000a### Bindings\u000a\u000aThe bindings decorator is similar to Ember's computed properties feature. [For example](http://jsfiddle.net/BZA8K/98/):\u000a\u000a```javascript\u000avar TestView = mojo.View.extend({\u000a  paper: paperclip.compile(\"hello-world\"),\u000a  bindings: {\u000a\u000a      //join first & last name\u000a      \"firstName, lastName\": {\u000a          \"fullName\": {\u000a              \"map\": function(firstName, lastName) {\u000a                  return [firstName, lastName].join(\" \");\u000a              }\u000a          }\u000a      },\u000a\u000a      //uppercase & lowercase fullName\u000a      \"fullName\": {\u000a          \"fullNameUpper\": {\u000a              \"map\": function(fullName) {\u000a                  return String(fullName).toUpperCase();\u000a              }\u000a          },\u000a          \"fullNameLower\": {\u000a              \"map\": function(fullName) {\u000a                  return String(fullName).toLowerCase();\u000a              }\u000a          }\u000a      },\u000a\u000a      //wait for fullNameUpper to change\u000a      \"fullNameUpper\": function(fullNameUpper) {\u000a          console.log(\"CHANGE!\");\u000a      }\u000a  }\u000a});\u000a\u000a//init view somewhere\u000a```\u000a\u000a### Sections\u000a\u000a\u000aSections are what make up your application - they allow you to break down your app into smaller, more modular pieces. [Here's a basic example](http://jsfiddle.net/BZA8K/99/):\u000a\u000a```javascript\u000a//views/main/header/logo.js\u000avar LogoView = mojo.View.extend({\u000a    paper: paperclip.compile(\"header-logo\")\u000a});\u000a\u000a//views/main/header/index.js\u000avar HeaderView = mojo.View.extend({\u000a    paper: paperclip.compile(\"header\"),\u000a    sections: {\u000a        logo: LogoView\u000a    }\u000a});\u000a\u000a//views/main/content/index.js\u000avar ContentView = mojo.View.extend({\u000a    paper: paperclip.compile(\"content\")\u000a});\u000a\u000a//views/main/index.js\u000avar MainView = mojo.View.extend({\u000a    paper: paperclip.compile(\"main\"),\u000a    sections: {\u000a        header: HeaderView,\u000a        content: ContentView\u000a    }\u000a});\u000a\u000avar mainView = new MainView();\u000a$(\"#application\")..append(mainView.render());\u000a```\u000a\u000aMojo comes with a few built-in components: [lists](#list-component), and [states](#states-component).\u000a\u000a### List Component\u000a\u000aList of views. [Here's an example](http://jsfiddle.net/BZA8K/100/):\u000a\u000a```javascript\u000avar TodosView = mojo.View.extend({\u000a  todos: todoCollection,\u000a  sections: {\u000a    items: {\u000a      type: \"list\",\u000a      source: \"todos\",\u000a      modelViewClass: TodoView\u000a    }\u000a  }\u000a})\u000a```\u000a\u000aNote that each model item in the source collection is assigned as `model` for each list item.\u000a\u000a#### list.filter(fn)\u000a\u000aFilters the list. For example:\u000a\u000a```javascript\u000avar TodosView = mojo.View.extend({\u000a  todos: todoCollection,\u000a  sections: {\u000a    items: {\u000a      type: \"list\",\u000a      source: \"todos\",\u000a      modelViewClass: TodoView,\u000a\u000a      //filter items that are NOT done.\u000a      filter: function(model) {\u000a        return !model.get(\"done\");\u000a      }\u000a    }\u000a  }\u000a});\u000a```\u000a\u000a#### list.sort(fn)\u000a\u000aSorts the list. For example:\u000a\u000a```javascript\u000avar TodosView = mojo.View.extend({\u000a  todos: todoCollection,\u000a  sections: {\u000a    items: {\u000a      type: \"list\",\u000a      source: \"todos\",\u000a      modelViewClass: TodoView,\u000a      sort: function(a, b) {\u000a        return a.get(\"priority\") > b.get(\"priority\") ? -1 : 1;\u000a      }\u000a    }\u000a  }\u000a});\u000a```\u000a\u000a### States Component\u000a\u000aThe states component allow you to toggle between multiple views. This is useful if you want to introduce something like routes into your application. [Here's an example](http://jsfiddle.net/BZA8K/101/):\u000a\u000a```javascript\u000avar MainView = mojo.View.extend({\u000a  sections: {\u000a    pages: {\u000a      type: \"states\",\u000a      index: 0,\u000a      views: [\u000a        { class: ContactView , name: \"contact\" },\u000a        { class: HomeView    , name: \"home\"    }\u000a      ]\u000a    }\u000a  }\u000a})\u000a```\u000a\u000a### states.index\u000a\u000athe current index of the state. [For example](http://jsfiddle.net/BZA8K/102/):\u000a\u000a```javascript\u000avar MainView = mojo.View.extend({\u000a  sections: {\u000a    pages: {\u000a      type: \"states\",\u000a      index: 0,\u000a      views: [\u000a        { class: ContactView , name: \"contact\" },\u000a        { class: HomeView    , name: \"home\"    }\u000a      ]\u000a    }\u000a  }\u000a});\u000a\u000avar view = new MainView();\u000aconsole.log(view.get(\"sections.pages.index\")); //0\u000a```\u000a\u000a### Custom Components\u000a\u000aMojo.js allows you to register your own components. [Here's a basic example](http://jsfiddle.net/BZA8K/103/):\u000a\u000a```javascript\u000a//views/main/header/logo.js\u000avar HelloView = mojo.View.extend({\u000a    paper: paperclip.compile(\"hello\")\u000a});\u000a\u000amojo.models.set(\"components.hello\", HelloView);\u000a\u000avar MainView = mojo.View.extend({\u000a    paper: paperclip.compile(\"main\"),\u000a    sections: {\u000a        hello1: {\u000a            type: \"hello\",\u000a            message: \"craig\"\u000a        },\u000a        hello2: {\u000a            type: \"hello\",\u000a            message: \"john\"\u000a        }\u000a    }\u000a});\u000a\u000avar mainView = new MainView();\u000a$(\"#application\").append(mainView.render());\u000a```\u000a\u000aNote that options provided for each section are automatically set to the component being created. The above equivalent might be:\u000a\u000a```javascript\u000avar view = new HelloView({\u000a  message: \"john\"\u000a});\u000a```\u000a\u000a### Custom Decorators\u000a\u000aThere are some cases you might want to add your own decorator. Say for instance you want to add your own custom template engine. [No problem](http://jsfiddle.net/BZA8K/104/):\u000a\u000adecorator:\u000a\u000a```javascript\u000avar handlebarsDecorator = {\u000a\u000a    //returns the handlebar options. This decorator is ignore if the options are\u000a    //undefined\u000a    getOptions: function(view) {\u000a        return view.handlebars;\u000a    },\u000a\u000a    //decorates the view with the given options\u000a    decorate: function(view, sourceName) {\u000a\u000a        //compile the template\u000a        var template = Handlebars.compile($(\"script[data-template-name='\" + sourceName + \"']\").html());\u000a\u000a        //wait for the view to render, then add the elements\u000a        view.on(\"render\", function() {\u000a\u000a            //temporary placeholder for the elements - use innerHTML to compile the template.\u000a            var div       = document.createElement(\"div\");\u000a            div.innerHTML = template(view.context());\u000a\u000a            //append JUST the child nodes to the view section\u000a            view.section.append.apply(view.section, div.childNodes);\u000a        });\u000a    }\u000a}\u000a\u000amojo.decorator(handlebarsDecorator);\u000a```\u000a\u000ausage:\u000a\u000a```javascript\u000avar MainView = mojo.View.extend({\u000a    name       : \"craig\",\u000a    handlebars : \"main\"\u000a});\u000a```\u000a\u000a## models singleton\u000a\u000aAllows for models to be referenced anywhere in the application. [See the variable scope example]().\u000a\u000a## Property Scope\u000a\u000aChild views inherit properties from the parent view, just like variable scope in JavaScript. Therefore, you should always `define` properties you want to use within your views. [For example](http://jsfiddle.net/BZA8K/105/):\u000a\u000a```javascript\u000avar user = new mojo.bindable.Object({\u000a    name: \"john\"\u000a});\u000a\u000amojo.models.set(\"user\", user);\u000a\u000avar HeaderView = mojo.View.extend({\u000a    paper: paperclip.compile(\"header\")\u000a});\u000a\u000avar MainView = mojo.View.extend({\u000a    define: [\"user\"],\u000a    paper: paperclip.compile(\"main\"),\u000a    bindings: {\u000a        \"models.user\": \"user\"\u000a    },\u000a    sections: {\u000a        header: HeaderView\u000a    }\u000a});\u000a\u000a\u000avar view = new MainView();\u000a$(\"#application\").append(view.render());\u000a```\u000a\u000a[Checkout what happens](http://jsfiddle.net/BZA8K/106/) when we define `user` in HeaderView. Notice that `user` isn't inherited anymore, and remains `undefined`.\u000a","readmeFilename":"README.md","bugs":{"url":"https://github.com/classdojo/mojo.js/issues"},"homepage":"https://github.com/classdojo/mojo.js","_id":"mojo-views@0.0.7","dist":{"shasum":"dbfe13908ed73ab0e9eb8b184d64c5df38ba2eae","tarball":"http://registry.npmjs.org/mojo-views/-/mojo-views-0.0.7.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"architectd","email":"craig.j.condon@gmail.com"},"maintainers":[{"name":"architectd","email":"craig.j.condon@gmail.com"}]}: mojo-views
131 error     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:237:14)
131 error     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:123:22)
131 error     at Request.EventEmitter.emit (events.js:98:17)
131 error     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:893:14)
131 error     at Request.EventEmitter.emit (events.js:117:20)
131 error     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:844:12)
131 error     at IncomingMessage.EventEmitter.emit (events.js:117:20)
131 error     at _stream_readable.js:920:16
131 error     at process._tickCallback (node.js:415:13)
132 error If you need help, you may report this *entire* log,
132 error including the npm and node versions, at:
132 error     <http://github.com/npm/npm/issues>
133 error System Darwin 13.2.0
134 error command "node" "/usr/local/bin/npm" "publish"
135 error cwd /Users/craig/Developer/Public/mojo-views
136 error node -v v0.10.26
137 error npm -v 1.4.3
138 verbose exit [ 1, true ]
